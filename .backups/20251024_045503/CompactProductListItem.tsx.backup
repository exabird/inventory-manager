'use client';

import { useState } from 'react';
import { Package, Hash, Barcode, Building2, Tag, ArrowUpFromLine, ArrowDownToLine } from 'lucide-react';
import ProductThumbnail from '@/components/inventory/ProductThumbnail';
import { Badge } from '@/components/ui/badge';
import { Product } from '@/lib/supabase';
import AIAutoFillButton, { AIFillStep } from '@/components/ui/AIAutoFillButton';

interface CompactProductListItemProps {
  product: Product & { categories?: { name: string } };
  onSelect: (product: Product) => void;
  onStockEdit: (product: Product) => void;
  onAIFill: (product: Product, onProgress?: (step: AIFillStep) => void) => Promise<{ images: number; metas: number }>;
  columnVisibility: {
    manufacturer_ref: boolean;
    category: boolean;
    quantity: boolean;
    selling_price_htva: boolean;
    purchase_price_htva: boolean;
    brand: boolean;
    warranty_period: boolean;
    min_stock_quantity: boolean;
    [key: string]: boolean;
  };
}

export default function CompactProductListItem({ 
  product, 
  onSelect, 
  onStockEdit,
  onAIFill,
  columnVisibility
}: CompactProductListItemProps) {
  const [aiStep, setAiStep] = useState<AIFillStep>('idle');
  const [completeSummary, setCompleteSummary] = useState<{ images: number; metas: number } | undefined>(undefined);

  const handleAIFill = async () => {
    console.log('üé® [CompactProductListItem] D√©but handleAIFill pour:', product.name);
    
    try {
      setAiStep('starting');
      
      // Appeler la vraie fonction avec callback de progression
      const summary = await onAIFill(product, setAiStep);
      
      // Utiliser le vrai r√©sum√© retourn√©
      console.log('üìä [CompactProductListItem] R√©sum√© IA re√ßu:', summary);
      setCompleteSummary(summary);
      
      // Le processus est termin√©
      setAiStep('complete');
      console.log('‚úÖ [CompactProductListItem] Remplissage IA termin√© !');
      
      // NE PAS r√©initialiser automatiquement - reste affich√© jusqu'au clic
    } catch (error: any) {
      console.error('‚ùå [CompactProductListItem] Erreur remplissage IA:', error);
      console.error('‚ùå [CompactProductListItem] Message:', error?.message);
      console.error('‚ùå [CompactProductListItem] Stack:', error?.stack);
      setAiStep('error');
      setTimeout(() => setAiStep('idle'), 3000);
    }
  };

  const handleRowClick = () => {
    // R√©initialiser le status IA quand on clique sur la ligne
    if (aiStep === 'complete') {
      setAiStep('idle');
      setCompleteSummary(undefined);
    }
    onSelect(product);
  };

  const getStockStatus = () => {
    if (product.quantity === 0) {
      return { 
        label: 'Rupture', 
        variant: 'destructive' as const,
        color: 'text-destructive',
        bgColor: 'bg-destructive/10',
        iconColor: 'text-destructive'
      };
    } else if (product.quantity < 5) {
      return { 
        label: 'Stock faible', 
        variant: 'secondary' as const,
        color: 'text-orange-600 dark:text-orange-400',
        bgColor: 'bg-orange-500/10',
        iconColor: 'text-orange-600 dark:text-orange-400'
      };
    } else {
      return { 
        label: 'En stock', 
        variant: 'default' as const,
        color: 'text-green-600 dark:text-green-400',
        bgColor: 'bg-green-500/10',
        iconColor: 'text-green-600 dark:text-green-400'
      };
    }
  };

  const getFieldValue = (fieldKey: string) => {
    try {
      if (fieldKey.startsWith('metadata.')) {
        const metadataKey = fieldKey.replace('metadata.', '');
        const value = product.metadata?.[metadataKey];
        return value !== null && value !== undefined ? String(value) : '-';
      }
      
      const value = (product as any)[fieldKey];
      if (value === null || value === undefined) return '-';
      if (typeof value === 'object') return JSON.stringify(value);
      return String(value);
    } catch (error) {
      return '-';
    }
  };

  const stockStatus = getStockStatus();

  return (
    <div 
      className="hover:bg-muted/50 transition-colors duration-150 cursor-pointer border-b border-border last:border-b-0"
      onClick={handleRowClick}
    >
      {/* Layout Mobile - Shadcn sobre */}
      <div className="block md:hidden p-3 group">
        <div className="flex items-center gap-3">
          {/* Checkbox */}
          <input 
            type="checkbox" 
            className="w-4 h-4 text-primary border-input rounded focus:ring-2 focus:ring-ring flex-shrink-0"
            onClick={(e) => e.stopPropagation()}
          />

          {/* Image produit */}
          <div className="flex-shrink-0">
            <ProductThumbnail 
              productId={product.id} 
              size="md" 
              className="rounded-md border border-border"
            />
          </div>

          {/* Informations produit */}
          <div className="flex-1 min-w-0 overflow-hidden">
            <div className="flex items-center gap-1 mb-1">
              <h3 className="text-sm font-medium text-foreground truncate min-w-0 overflow-hidden">
                {product.name}
              </h3>
              <AIAutoFillButton
                step={aiStep}
                onClick={handleAIFill}
                completeSummary={completeSummary}
                className="flex-shrink-0 ml-1"
              />
            </div>
            <div className="flex items-center gap-2">
              <Badge 
                variant={product.quantity === 0 ? "destructive" : product.quantity < 5 ? "outline" : "default"}
                className="gap-1"
              >
                <Package className="h-3 w-3" />
                {product.quantity}
              </Badge>
              {product.manufacturer_ref && (
                <span className="text-xs text-muted-foreground truncate">#{product.manufacturer_ref}</span>
              )}
            </div>
          </div>

          {/* Prix */}
          <div className="flex items-center gap-2 flex-shrink-0">
            <div className="text-right">
              <div className="text-sm font-semibold text-foreground">
                {product.selling_price_htva?.toFixed(0) || '0'}‚Ç¨
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Layout Desktop - Design Shadcn sobre */}
      <div className="hidden md:flex items-center gap-3 py-3 px-4 transition-colors cursor-pointer group relative">
        {/* Checkbox */}
        <div className="flex-shrink-0 w-4">
          <input 
            type="checkbox" 
            className="w-4 h-4 text-primary border-input rounded focus:ring-2 focus:ring-ring cursor-pointer"
            onClick={(e) => e.stopPropagation()}
          />
        </div>

        {/* Miniature produit */}
        <div className="flex-shrink-0 w-12">
          <ProductThumbnail 
            productId={product.id} 
            size="md" 
            className="rounded-md border border-border"
          />
        </div>

        {/* Nom du produit avec bouton IA */}
        <div className="flex-1 min-w-0 flex items-center gap-1">
          <h3 className="text-sm font-medium text-foreground truncate group-hover:text-primary transition-colors min-w-0 overflow-hidden">
            {product.name}
          </h3>
          <AIAutoFillButton
            step={aiStep}
            onClick={handleAIFill}
            completeSummary={completeSummary}
            className="flex-shrink-0 ml-1"
          />
        </div>

        {/* R√©f√©rence fabricant - Shadcn sobre */}
        {columnVisibility.manufacturer_ref && (
          <div className="flex-shrink-0 w-24 flex items-center">
            <Badge variant="outline" className="font-mono text-xs max-w-full truncate">
              <Hash className="h-3 w-3 mr-1 text-muted-foreground flex-shrink-0" />
              <span className="truncate">{product.manufacturer_ref || '-'}</span>
            </Badge>
          </div>
        )}

        {/* Cat√©gorie - Badge Shadcn */}
        {columnVisibility.category && (
          <div className="flex-shrink-0 w-32 flex items-center">
            {product.categories?.name ? (
              <Badge variant="secondary" className="max-w-full truncate">
                <Tag className="h-3 w-3 mr-1 flex-shrink-0" />
                <span className="truncate">{product.categories.name}</span>
              </Badge>
            ) : (
              <span className="text-xs text-muted-foreground">-</span>
            )}
          </div>
        )}

        {/* Marque - Badge sobre */}
        {columnVisibility.brand && (
          <div className="flex-shrink-0 w-24 flex items-center justify-center">
            {product.brand || product.manufacturer ? (
              <Badge variant="outline" className="text-xs max-w-full truncate">
                <Building2 className="h-3 w-3 mr-1 flex-shrink-0" />
                <span className="truncate">{product.brand || product.manufacturer}</span>
              </Badge>
            ) : (
              <span className="text-xs text-muted-foreground">-</span>
            )}
          </div>
        )}

        {/* Stock - Badge simple */}
        {columnVisibility.quantity && (
          <div className="flex-shrink-0 w-20 text-center">
            <Badge 
              variant={product.quantity === 0 ? "destructive" : product.quantity < 5 ? "outline" : "default"}
              className="gap-1"
            >
              <Package className="h-3 w-3" />
              {product.quantity}
            </Badge>
          </div>
        )}

        {/* Prix de vente - Simple */}
        {columnVisibility.selling_price_htva && (
          <div className="flex-shrink-0 w-20 text-right flex items-center justify-end">
            {product.selling_price_htva ? (
              <div className="inline-flex items-center gap-1 text-sm font-medium text-foreground">
                <ArrowUpFromLine className="h-3 w-3 text-muted-foreground flex-shrink-0" />
                <span className="whitespace-nowrap">{product.selling_price_htva.toFixed(2)}‚Ç¨</span>
              </div>
            ) : (
              <span className="text-xs text-muted-foreground">-</span>
            )}
          </div>
        )}

        {/* Prix d'achat - Simple */}
        {columnVisibility.purchase_price_htva && (
          <div className="flex-shrink-0 w-20 text-right flex items-center justify-end">
            {product.purchase_price_htva ? (
              <div className="inline-flex items-center gap-1 text-sm font-medium text-muted-foreground">
                <ArrowDownToLine className="h-3 w-3 text-muted-foreground flex-shrink-0" />
                <span className="whitespace-nowrap">{product.purchase_price_htva.toFixed(2)}‚Ç¨</span>
              </div>
            ) : (
              <span className="text-xs text-muted-foreground">-</span>
            )}
          </div>
        )}

        {/* Colonnes dynamiques - Shadcn sobre */}
        {Object.keys(columnVisibility)
          .filter(key => !['manufacturer_ref', 'category', 'quantity', 'selling_price_htva', 'purchase_price_htva', 'brand', 'warranty_period', 'min_stock_quantity'].includes(key))
          .filter(key => columnVisibility[key])
          .map(fieldKey => {
            const value = getFieldValue(fieldKey);
            const isMetadata = fieldKey.startsWith('metadata.');
            
            return (
              <div key={fieldKey} className="flex-shrink-0 w-24 text-center">
                {value !== '-' ? (
                  <Badge 
                    variant={isMetadata ? "secondary" : "outline"}
                    className="text-xs truncate max-w-full"
                    title={`${fieldKey}: ${value}`}
                  >
                    {value}
                  </Badge>
                ) : (
                  <span className="text-xs text-muted-foreground">-</span>
                )}
              </div>
            );
          })}
      </div>
    </div>
  );
}