#!/bin/bash

echo "üîç Next.js Real-time Error Monitor - ACTIF"
echo "=========================================="
echo ""

# Fonction pour capturer et afficher les erreurs
capture_and_display_errors() {
  timestamp=$(date '+%H:%M:%S')
  echo "[$timestamp] V√©rification des erreurs..."
  
  # V√©rifier les erreurs HTTP
  http_status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000")
  if [ "$http_status" != "200" ]; then
    echo "‚ùå [$timestamp] Erreur HTTP: $http_status"
  fi
  
  # V√©rifier les erreurs dans le HTML
  html_content=$(curl -s "http://localhost:3000")
  errors=$(echo "$html_content" | grep -o "error\|Error\|ERROR" | wc -l)
  undefineds=$(echo "$html_content" | grep -o "undefined" | wc -l)
  nulls=$(echo "$html_content" | grep -o "null" | wc -l)
  
  if [ "$errors" -gt 0 ] || [ "$undefineds" -gt 0 ] || [ "$nulls" -gt 0 ]; then
    echo "‚ùå [$timestamp] Erreurs d√©tect√©es:"
    echo "   - Errors: $errors"
    echo "   - Undefined: $undefineds" 
    echo "   - Null: $nulls"
    
    # Afficher les premi√®res erreurs trouv√©es
    if [ "$errors" -gt 0 ]; then
      echo "   - Exemples d'erreurs:"
      echo "$html_content" | grep -o "error\|Error\|ERROR" | head -3 | sed 's/^/     /'
    fi
  else
    echo "‚úÖ [$timestamp] Aucune erreur d√©tect√©e"
  fi
  
  echo ""
}

# Boucle de monitoring continue
echo "üöÄ D√©marrage du monitoring en temps r√©el..."
echo "Appuyez sur Ctrl+C pour arr√™ter"
echo ""

while true; do
  capture_and_display_errors
  sleep 10
done
