---
description: "R√®gles fondamentales du projet Inventory Manager - contexte, processus et standards obligatoires"
globs: "*"
alwaysApply: true
---

# R√®gles Fondamentales - Inventory Manager

## Contexte du Projet

- **Application** : Gestion d'inventaire Next.js 16 avec Supabase
- **Version actuelle** : 0.1.12
- **Production** : https://stock.exabird.be/
- **Statut** : 100% fonctionnel, stable

## Stack Technique

- **Frontend** : Next.js 16.0.0 (App Router), React 19.2.0, TypeScript 5.x
- **UI** : Shadcn/ui + Tailwind CSS 4.x (mobile-first)
- **Backend** : Supabase (PostgreSQL + Storage + RLS)
- **Formulaires** : React Hook Form + Zod
- **Scanner** : html5-qrcode

## Processus de D√©veloppement OBLIGATOIRE

### Workflow en 6 √©tapes

1. **D√©veloppement local** : `npm run dev`, tester dans le navigateur
2. **Tests locaux** : `npm run build:check`, `npm run lint`, `npm run type-check`
3. **Validation utilisateur** : ATTENDRE validation explicite OBLIGATOIRE
4. **Versioning** : `npm run version:patch` (ou minor/major avec confirmation)
5. **Commit** : `git commit -m "üì¶ VX.X.X - Description"`
6. **D√©ploiement** : Push GitHub ‚Üí Vercel (v√©rifier logs apr√®s 45s)

### R√®gles de Versioning STRICTES

- **Patch (V0.0.Z)** : Corrections, am√©liorations mineures ‚Üí Agent peut incr√©menter
- **Minor (V0.X.0)** : Nouvelles features compl√®tes ‚Üí N√âCESSITE confirmation utilisateur
- **Major (VX.0.0)** : Changements majeurs ‚Üí N√âCESSITE confirmation utilisateur

## Ce que l'Agent DOIT TOUJOURS Faire

<example type="required">
‚úÖ Attendre validation utilisateur avant d√©ploiement
‚úÖ Incr√©menter version avant chaque commit fonctionnel
‚úÖ Ex√©cuter tous les tests obligatoires
‚úÖ Typer strictement en TypeScript (0 any tol√©r√©)
‚úÖ Commenter le code en fran√ßais
‚úÖ Utiliser logs structur√©s avec emojis (üì¶ ‚úÖ ‚ùå ‚ö†Ô∏è üîç)
</example>

## Ce que l'Agent NE DOIT JAMAIS Faire

<example type="invalid">
‚ùå D√©ployer sans validation utilisateur explicite
‚ùå Incr√©menter version minor/major sans confirmation
‚ùå Utiliser 'any' en TypeScript
‚ùå Cr√©er des composants classe React
‚ùå Sauter les tests obligatoires
‚ùå Ignorer les erreurs TypeScript
‚ùå Commenter en anglais
‚ùå Modifier DEVELOPMENT_PROCESSES.md sans validation
</example>

## Documentation Essentielle

- **Architecture** : `docs/ARCHITECTURE_GUIDE.md` (97 KB, 1,183 lignes)
- **Processus** : `docs/DEVELOPMENT_PROCESSES.md` (processus d√©taill√©s)
- **Debugging** : `docs/DEBUGGING_GUIDE.md` (159 KB, 1,022 lignes)
- **√âtat actuel** : `SYNTHESE_RESTRUCTURATION.md`
- **Bugs connus** : `PROBLEMES_CORRIGES.md`

## Services Principaux

### ProductService (src/lib/services.ts)
```typescript
ProductService.getAll()              // Tous les produits avec cat√©gories
ProductService.getByBarcode(code)    // Recherche par code-barres
ProductService.create(product)       // Cr√©er produit
ProductService.update(id, updates)   // Mettre √† jour
ProductService.delete(id)            // Supprimer
```

### StockService (src/lib/stockService.ts)
```typescript
StockService.performStockOperation(productId, operation)
StockService.getOperationHistory(productId)
StockService.updateMinStockSettings(productId, settings)
```

## Commandes Essentielles

```bash
# D√©veloppement
npm run dev              # Lancer l'app
npm run build:check      # V√©rifier compilation
npm run lint             # V√©rifier linting
npm run type-check       # V√©rifier TypeScript

# Tests
./test-app.sh            # Tests complets (83%+ attendu)

# Versioning
npm run version:patch    # V0.0.X (auto OK)
npm run version:minor    # V0.X.0 (confirmation requise)
npm run version:major    # VX.0.0 (confirmation requise)

# Monitoring
node monitor-realtime-console.js   # Monitoring temps r√©el
```

## M√©triques de Qualit√©

- **0 erreur TypeScript** (obligatoire)
- **Build r√©ussi** (obligatoire)
- **Tests automatiques** : 83%+ de r√©ussite
- **Performance** : Chargement < 2s
- **Mobile-first** : Responsive parfait
